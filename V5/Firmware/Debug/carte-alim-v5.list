
carte-alim-v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004694  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048ac  080048ac  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080048ac  080048ac  000148ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048b4  080048b4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080048bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000020  080048dc  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080048dc  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b4f  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c9  00000000  00000000  00037b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  0003a268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  0003b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f824  00000000  00000000  0003cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001799a  00000000  00000000  0005c384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1ff5  00000000  00000000  00073d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00145d13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b40  00000000  00000000  00145d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004854 	.word	0x08004854

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08004854 	.word	0x08004854

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <Compare_RGB_Color>:
color_t Black = {0, 0, 0};

bool RGB_State = false;

bool Compare_RGB_Color(color_t color1, color_t color2)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	return (
		color1.red == color2.red &&
 8000526:	793a      	ldrb	r2, [r7, #4]
 8000528:	783b      	ldrb	r3, [r7, #0]
		color1.green == color2.green &&
 800052a:	429a      	cmp	r2, r3
 800052c:	d109      	bne.n	8000542 <Compare_RGB_Color+0x26>
 800052e:	797a      	ldrb	r2, [r7, #5]
 8000530:	787b      	ldrb	r3, [r7, #1]
		color1.red == color2.red &&
 8000532:	429a      	cmp	r2, r3
 8000534:	d105      	bne.n	8000542 <Compare_RGB_Color+0x26>
		color1.blue == color2.blue
 8000536:	79ba      	ldrb	r2, [r7, #6]
 8000538:	78bb      	ldrb	r3, [r7, #2]
		color1.green == color2.green &&
 800053a:	429a      	cmp	r2, r3
 800053c:	d101      	bne.n	8000542 <Compare_RGB_Color+0x26>
 800053e:	2301      	movs	r3, #1
 8000540:	e000      	b.n	8000544 <Compare_RGB_Color+0x28>
 8000542:	2300      	movs	r3, #0
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
	);
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <Set_RGB_Button>:

void Set_RGB_Button(color_t color)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, color.blue);
 8000560:	79ba      	ldrb	r2, [r7, #6]
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <Set_RGB_Button+0x50>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, color.red);
 8000568:	793a      	ldrb	r2, [r7, #4]
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <Set_RGB_Button+0x50>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, color.green);
 8000570:	797a      	ldrb	r2, [r7, #5]
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <Set_RGB_Button+0x50>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c

	RGB_State = !Compare_RGB_Color(color, Black);
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <Set_RGB_Button+0x54>)
 800057a:	6819      	ldr	r1, [r3, #0]
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f7ff ffcd 	bl	800051c <Compare_RGB_Color>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf14      	ite	ne
 8000588:	2301      	movne	r3, #1
 800058a:	2300      	moveq	r3, #0
 800058c:	b2db      	uxtb	r3, r3
 800058e:	f083 0301 	eor.w	r3, r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <Set_RGB_Button+0x58>)
 800059c:	701a      	strb	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000f4 	.word	0x200000f4
 80005ac:	200001d4 	.word	0x200001d4
 80005b0:	200001d7 	.word	0x200001d7

080005b4 <Blink_RGB_Button>:

void Blink_RGB_Button(color_t color)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if (!RGB_State)
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <Blink_RGB_Button+0x30>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	f083 0301 	eor.w	r3, r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d004      	beq.n	80005d4 <Blink_RGB_Button+0x20>
	{
		Set_RGB_Button(Red);
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <Blink_RGB_Button+0x34>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	f7ff ffc3 	bl	8000558 <Set_RGB_Button>
	}
	else
	{
		Set_RGB_Button(Black);
	}
}
 80005d2:	e003      	b.n	80005dc <Blink_RGB_Button+0x28>
		Set_RGB_Button(Black);
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <Blink_RGB_Button+0x38>)
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	f7ff ffbe 	bl	8000558 <Set_RGB_Button>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200001d7 	.word	0x200001d7
 80005e8:	20000000 	.word	0x20000000
 80005ec:	200001d4 	.word	0x200001d4

080005f0 <Init_RGB_Button>:

void Init_RGB_Button()
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005f4:	2100      	movs	r1, #0
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <Init_RGB_Button+0x28>)
 80005f8:	f002 fbea 	bl	8002dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005fc:	2104      	movs	r1, #4
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <Init_RGB_Button+0x28>)
 8000600:	f002 fbe6 	bl	8002dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000604:	2108      	movs	r1, #8
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <Init_RGB_Button+0x28>)
 8000608:	f002 fbe2 	bl	8002dd0 <HAL_TIM_PWM_Start>

	Set_RGB_Button(Orange);
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <Init_RGB_Button+0x2c>)
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	f7ff ffa2 	bl	8000558 <Set_RGB_Button>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000f4 	.word	0x200000f4
 800061c:	20000004 	.word	0x20000004

08000620 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == INT_LTC_Pin)
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d10f      	bne.n	8000650 <HAL_GPIO_EXTI_Callback+0x30>
	{
		HAL_GPIO_WritePin(INT_GPIO_Port, INT_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f001 f9d7 	bl	80019ec <HAL_GPIO_WritePin>
		Set_RGB_Button(Purple);
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_GPIO_EXTI_Callback+0x38>)
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	f7ff ff89 	bl	8000558 <Set_RGB_Button>
		Interrupt_Start_Timestamp = HAL_GetTick();
 8000646:	f000 fd3d 	bl	80010c4 <HAL_GetTick>
 800064a:	4603      	mov	r3, r0
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <HAL_GPIO_EXTI_Callback+0x3c>)
 800064e:	6013      	str	r3, [r2, #0]
	}
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000010 	.word	0x20000010
 800065c:	200001dc 	.word	0x200001dc

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fcc8 	bl	8000ffa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f86b 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 f9f7 	bl	8000a60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000672:	f000 f9a9 	bl	80009c8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000676:	f000 f8f7 	bl	8000868 <MX_I2C2_Init>
  MX_FDCAN1_Init();
 800067a:	f000 f8af 	bl	80007dc <MX_FDCAN1_Init>
  MX_TIM4_Init();
 800067e:	f000 f933 	bl	80008e8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Init_RGB_Button();
 8000682:	f7ff ffb5 	bl	80005f0 <Init_RGB_Button>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint32_t timestamp = HAL_GetTick();
 8000686:	f000 fd1d 	bl	80010c4 <HAL_GetTick>
 800068a:	6078      	str	r0, [r7, #4]
	while (!HAL_GPIO_ReadPin(POWER_HOLD_GPIO_Port, POWER_HOLD_Pin))
 800068c:	e014      	b.n	80006b8 <main+0x58>
	{
	  if (HAL_GetTick() - timestamp > PH_WAINTING_TIME)
 800068e:	f000 fd19 	bl	80010c4 <HAL_GetTick>
 8000692:	4602      	mov	r2, r0
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	f643 2298 	movw	r2, #15000	; 0x3a98
 800069c:	4293      	cmp	r3, r2
 800069e:	d904      	bls.n	80006aa <main+0x4a>
	  {
	    HAL_GPIO_WritePin(KILL_GPIO_Port, KILL_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2102      	movs	r1, #2
 80006a4:	4820      	ldr	r0, [pc, #128]	; (8000728 <main+0xc8>)
 80006a6:	f001 f9a1 	bl	80019ec <HAL_GPIO_WritePin>
	  }

	  Blink_RGB_Button(Red);
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <main+0xcc>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	f7ff ff81 	bl	80005b4 <Blink_RGB_Button>
	   HAL_Delay(PH_BLINK_PERIOD);
 80006b2:	2064      	movs	r0, #100	; 0x64
 80006b4:	f000 fd12 	bl	80010dc <HAL_Delay>
	while (!HAL_GPIO_ReadPin(POWER_HOLD_GPIO_Port, POWER_HOLD_Pin))
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f001 f97d 	bl	80019bc <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0e2      	beq.n	800068e <main+0x2e>
    }

    if (timestamp - Interrupt_Start_Timestamp > INT_PULSE_TIME)
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <main+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	2b64      	cmp	r3, #100	; 0x64
 80006d2:	d91a      	bls.n	800070a <main+0xaa>
    {
      HAL_GPIO_WritePin(INT_GPIO_Port, INT_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f001 f985 	bl	80019ec <HAL_GPIO_WritePin>
      Interrupt_Start_Timestamp = timestamp;
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <main+0xd0>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6013      	str	r3, [r2, #0]

      if (HAL_GPIO_ReadPin(G1S_GPIO_Port, G1S_Pin))
 80006e8:	2101      	movs	r1, #1
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f001 f965 	bl	80019bc <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d004      	beq.n	8000702 <main+0xa2>
      {
        Set_RGB_Button(Green);
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <main+0xd4>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	f7ff ff2c 	bl	8000558 <Set_RGB_Button>
 8000700:	e003      	b.n	800070a <main+0xaa>
      }
      else
      {
        Set_RGB_Button(Blue);
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <main+0xd8>)
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	f7ff ff27 	bl	8000558 <Set_RGB_Button>
      }
    }

    if (timestamp - Status_Last_Blink_Timestamp > STATUS_BLINK_PERIOD)
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <main+0xdc>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000716:	d9b6      	bls.n	8000686 <main+0x26>
    {
      HAL_GPIO_TogglePin(STATUS_GPIO_Port, STATUS_Pin);
 8000718:	2110      	movs	r1, #16
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <main+0xe0>)
 800071c:	f001 f97e 	bl	8001a1c <HAL_GPIO_TogglePin>
      Status_Last_Blink_Timestamp = timestamp;
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <main+0xdc>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
  {
 8000726:	e7ae      	b.n	8000686 <main+0x26>
 8000728:	48001400 	.word	0x48001400
 800072c:	20000000 	.word	0x20000000
 8000730:	200001dc 	.word	0x200001dc
 8000734:	2000000c 	.word	0x2000000c
 8000738:	20000008 	.word	0x20000008
 800073c:	200001d8 	.word	0x200001d8
 8000740:	48000400 	.word	0x48000400

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0318 	add.w	r3, r7, #24
 800074e:	2238      	movs	r2, #56	; 0x38
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f004 f876 	bl	8004844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000766:	f44f 7000 	mov.w	r0, #512	; 0x200
 800076a:	f001 fabb 	bl	8001ce4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076e:	2302      	movs	r3, #2
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000784:	2301      	movs	r3, #1
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000788:	2308      	movs	r3, #8
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0318 	add.w	r3, r7, #24
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fb55 	bl	8001e4c <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x68>
  {
    Error_Handler();
 80007a8:	f000 fa2e 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2303      	movs	r3, #3
 80007b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2102      	movs	r1, #2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fe53 	bl	8002470 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007d0:	f000 fa1a 	bl	8000c08 <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	; 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_FDCAN1_Init+0x84>)
 80007e2:	4a20      	ldr	r2, [pc, #128]	; (8000864 <MX_FDCAN1_Init+0x88>)
 80007e4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_FDCAN1_Init+0x84>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_FDCAN1_Init+0x84>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_FDCAN1_Init+0x84>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_FDCAN1_Init+0x84>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_FDCAN1_Init+0x84>)
 8000800:	2200      	movs	r2, #0
 8000802:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_FDCAN1_Init+0x84>)
 8000806:	2200      	movs	r2, #0
 8000808:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_FDCAN1_Init+0x84>)
 800080c:	2210      	movs	r2, #16
 800080e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_FDCAN1_Init+0x84>)
 8000812:	2201      	movs	r2, #1
 8000814:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_FDCAN1_Init+0x84>)
 8000818:	2201      	movs	r2, #1
 800081a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_FDCAN1_Init+0x84>)
 800081e:	2201      	movs	r2, #1
 8000820:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_FDCAN1_Init+0x84>)
 8000824:	2201      	movs	r2, #1
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <MX_FDCAN1_Init+0x84>)
 800082a:	2201      	movs	r2, #1
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_FDCAN1_Init+0x84>)
 8000830:	2201      	movs	r2, #1
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_FDCAN1_Init+0x84>)
 8000836:	2201      	movs	r2, #1
 8000838:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_FDCAN1_Init+0x84>)
 800083c:	2200      	movs	r2, #0
 800083e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_FDCAN1_Init+0x84>)
 8000842:	2200      	movs	r2, #0
 8000844:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_FDCAN1_Init+0x84>)
 8000848:	2200      	movs	r2, #0
 800084a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_FDCAN1_Init+0x84>)
 800084e:	f000 fd77 	bl	8001340 <HAL_FDCAN_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000858:	f000 f9d6 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000003c 	.word	0x2000003c
 8000864:	40006400 	.word	0x40006400

08000868 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_I2C2_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_I2C2_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B17DB5;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_I2C2_Init+0x74>)
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <MX_I2C2_Init+0x7c>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_I2C2_Init+0x74>)
 8000880:	2201      	movs	r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_I2C2_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_I2C2_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_I2C2_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <MX_I2C2_Init+0x74>)
 80008a4:	f001 f8ec 	bl	8001a80 <HAL_I2C_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008ae:	f000 f9ab 	bl	8000c08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <MX_I2C2_Init+0x74>)
 80008b6:	f001 f97e 	bl	8001bb6 <HAL_I2CEx_ConfigAnalogFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008c0:	f000 f9a2 	bl	8000c08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_I2C2_Init+0x74>)
 80008c8:	f001 f9c0 	bl	8001c4c <HAL_I2CEx_ConfigDigitalFilter>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 f999 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000a0 	.word	0x200000a0
 80008e0:	40005800 	.word	0x40005800
 80008e4:	10b17db5 	.word	0x10b17db5

080008e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800090c:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <MX_TIM4_Init+0xd8>)
 800090e:	4a2d      	ldr	r2, [pc, #180]	; (80009c4 <MX_TIM4_Init+0xdc>)
 8000910:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 509;
 8000912:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <MX_TIM4_Init+0xd8>)
 8000914:	f240 12fd 	movw	r2, #509	; 0x1fd
 8000918:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <MX_TIM4_Init+0xd8>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_TIM4_Init+0xd8>)
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <MX_TIM4_Init+0xd8>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_TIM4_Init+0xd8>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000932:	4823      	ldr	r0, [pc, #140]	; (80009c0 <MX_TIM4_Init+0xd8>)
 8000934:	f002 f9f4 	bl	8002d20 <HAL_TIM_PWM_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800093e:	f000 f963 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	481b      	ldr	r0, [pc, #108]	; (80009c0 <MX_TIM4_Init+0xd8>)
 8000952:	f003 f857 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800095c:	f000 f954 	bl	8000c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000960:	2360      	movs	r3, #96	; 0x60
 8000962:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4812      	ldr	r0, [pc, #72]	; (80009c0 <MX_TIM4_Init+0xd8>)
 8000978:	f002 fb36 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000982:	f000 f941 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	2204      	movs	r2, #4
 800098a:	4619      	mov	r1, r3
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_TIM4_Init+0xd8>)
 800098e:	f002 fb2b 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000998:	f000 f936 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	2208      	movs	r2, #8
 80009a0:	4619      	mov	r1, r3
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <MX_TIM4_Init+0xd8>)
 80009a4:	f002 fb20 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80009ae:	f000 f92b 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <MX_TIM4_Init+0xd8>)
 80009b4:	f000 fa24 	bl	8000e00 <HAL_TIM_MspPostInit>

}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200000f4 	.word	0x200000f4
 80009c4:	40000800 	.word	0x40000800

080009c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ce:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <MX_USART2_UART_Init+0x94>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a10:	4811      	ldr	r0, [pc, #68]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a12:	f003 f885 	bl	8003b20 <HAL_UART_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a1c:	f000 f8f4 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a20:	2100      	movs	r1, #0
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a24:	f003 fe20 	bl	8004668 <HAL_UARTEx_SetTxFifoThreshold>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2e:	f000 f8eb 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a36:	f003 fe55 	bl	80046e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a40:	f000 f8e2 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a46:	f003 fdd6 	bl	80045f6 <HAL_UARTEx_DisableFifoMode>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f8da 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000140 	.word	0x20000140
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a76:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <MX_GPIO_Init+0x19c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a60      	ldr	r2, [pc, #384]	; (8000bfc <MX_GPIO_Init+0x19c>)
 8000a7c:	f043 0320 	orr.w	r3, r3, #32
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b5e      	ldr	r3, [pc, #376]	; (8000bfc <MX_GPIO_Init+0x19c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0320 	and.w	r3, r3, #32
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <MX_GPIO_Init+0x19c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a5a      	ldr	r2, [pc, #360]	; (8000bfc <MX_GPIO_Init+0x19c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b58      	ldr	r3, [pc, #352]	; (8000bfc <MX_GPIO_Init+0x19c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b55      	ldr	r3, [pc, #340]	; (8000bfc <MX_GPIO_Init+0x19c>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a54      	ldr	r2, [pc, #336]	; (8000bfc <MX_GPIO_Init+0x19c>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b52      	ldr	r3, [pc, #328]	; (8000bfc <MX_GPIO_Init+0x19c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KILL_GPIO_Port, KILL_Pin, GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	484f      	ldr	r0, [pc, #316]	; (8000c00 <MX_GPIO_Init+0x1a0>)
 8000ac4:	f000 ff92 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_5P_Pin|AU_STM32_Pin|INT_Pin|RESET_ODRIVE_Pin, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f248 4112 	movw	r1, #33810	; 0x8412
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f000 ff8b 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_12P_GPIO_Port, RESET_12P_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2101      	movs	r1, #1
 8000ada:	484a      	ldr	r0, [pc, #296]	; (8000c04 <MX_GPIO_Init+0x1a4>)
 8000adc:	f000 ff86 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	4847      	ldr	r0, [pc, #284]	; (8000c04 <MX_GPIO_Init+0x1a4>)
 8000ae6:	f000 ff81 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_LTC_Pin */
  GPIO_InitStruct.Pin = INT_LTC_Pin;
 8000aea:	2301      	movs	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_LTC_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	4840      	ldr	r0, [pc, #256]	; (8000c00 <MX_GPIO_Init+0x1a0>)
 8000b00:	f000 fdda 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KILL_Pin */
  GPIO_InitStruct.Pin = KILL_Pin;
 8000b04:	2302      	movs	r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KILL_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4839      	ldr	r0, [pc, #228]	; (8000c00 <MX_GPIO_Init+0x1a0>)
 8000b1c:	f000 fdcc 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : G1S_Pin */
  GPIO_InitStruct.Pin = G1S_Pin;
 8000b20:	2301      	movs	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(G1S_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b36:	f000 fdbf 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_5P_Pin */
  GPIO_InitStruct.Pin = RESET_5P_Pin;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b3e:	2311      	movs	r3, #17
 8000b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_5P_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f000 fdb0 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AU_STM32_Pin INT_Pin RESET_ODRIVE_Pin */
  GPIO_InitStruct.Pin = AU_STM32_Pin|INT_Pin|RESET_ODRIVE_Pin;
 8000b58:	f248 4310 	movw	r3, #33808	; 0x8410
 8000b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f000 fda0 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AU_EXT_Pin AU_ROBOT_Pin POWER_HOLD_Pin */
  GPIO_InitStruct.Pin = AU_EXT_Pin|AU_ROBOT_Pin|POWER_HOLD_Pin;
 8000b78:	23e0      	movs	r3, #224	; 0xe0
 8000b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b7c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f000 fd92 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_12P_Pin */
  GPIO_InitStruct.Pin = RESET_12P_Pin;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b98:	2311      	movs	r3, #17
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_12P_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4816      	ldr	r0, [pc, #88]	; (8000c04 <MX_GPIO_Init+0x1a4>)
 8000bac:	f000 fd84 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_Pin */
  GPIO_InitStruct.Pin = STATUS_Pin;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480f      	ldr	r0, [pc, #60]	; (8000c04 <MX_GPIO_Init+0x1a4>)
 8000bc8:	f000 fd76 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_STATUS_Pin */
  GPIO_InitStruct.Pin = POWER_STATUS_Pin;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POWER_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4809      	ldr	r0, [pc, #36]	; (8000c04 <MX_GPIO_Init+0x1a4>)
 8000be0:	f000 fd6a 	bl	80016b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2006      	movs	r0, #6
 8000bea:	f000 fb74 	bl	80012d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bee:	2006      	movs	r0, #6
 8000bf0:	f000 fb8b 	bl	800130a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48001400 	.word	0x48001400
 8000c04:	48000400 	.word	0x48000400

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_MspInit+0x44>)
 8000c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_MspInit+0x44>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6613      	str	r3, [r2, #96]	; 0x60
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_MspInit+0x44>)
 8000c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x44>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x44>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x44>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c4a:	f001 f8ef 	bl	8001e2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09e      	sub	sp, #120	; 0x78
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2250      	movs	r2, #80	; 0x50
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fde1 	bl	8004844 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <HAL_FDCAN_MspInit+0xac>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d139      	bne.n	8000d00 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c90:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c96:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 fe03 	bl	80028a8 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000ca8:	f7ff ffae 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_FDCAN_MspInit+0xb0>)
 8000cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb0:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <HAL_FDCAN_MspInit+0xb0>)
 8000cb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_FDCAN_MspInit+0xb0>)
 8000cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_FDCAN_MspInit+0xb0>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc8:	4a10      	ldr	r2, [pc, #64]	; (8000d0c <HAL_FDCAN_MspInit+0xb0>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_FDCAN_MspInit+0xb0>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000cdc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ce0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cee:	2309      	movs	r3, #9
 8000cf0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfc:	f000 fcdc 	bl	80016b8 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000d00:	bf00      	nop
 8000d02:	3778      	adds	r7, #120	; 0x78
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40006400 	.word	0x40006400
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b09e      	sub	sp, #120	; 0x78
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2250      	movs	r2, #80	; 0x50
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 fd87 	bl	8004844 <memset>
  if(hi2c->Instance==I2C2)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <HAL_I2C_MspInit+0xa8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d137      	bne.n	8000db0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 fdab 	bl	80028a8 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d58:	f7ff ff56 	bl	8000c08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_I2C_MspInit+0xac>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <HAL_I2C_MspInit+0xac>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_I2C_MspInit+0xac>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d78:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7a:	2312      	movs	r3, #18
 8000d7c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d86:	2304      	movs	r3, #4
 8000d88:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f000 fc90 	bl	80016b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_I2C_MspInit+0xac>)
 8000d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_I2C_MspInit+0xac>)
 8000d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000da2:	6593      	str	r3, [r2, #88]	; 0x58
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_I2C_MspInit+0xac>)
 8000da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000db0:	bf00      	nop
 8000db2:	3778      	adds	r7, #120	; 0x78
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40005800 	.word	0x40005800
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_TIM_PWM_MspInit+0x38>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10b      	bne.n	8000dea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_TIM_PWM_MspInit+0x3c>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd6:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <HAL_TIM_PWM_MspInit+0x3c>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <HAL_TIM_PWM_MspInit+0x3c>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40000800 	.word	0x40000800
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_TIM_MspPostInit+0x64>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d11c      	bne.n	8000e5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_TIM_MspPostInit+0x68>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_TIM_MspPostInit+0x68>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_TIM_MspPostInit+0x68>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = BLUE_CHANNEL_Pin|RED_CHANNEL_Pin|GREEN_CHANNEL_Pin;
 8000e3a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000e3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_TIM_MspPostInit+0x6c>)
 8000e58:	f000 fc2e 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40000800 	.word	0x40000800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000400 	.word	0x48000400

08000e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b09e      	sub	sp, #120	; 0x78
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2250      	movs	r2, #80	; 0x50
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fcd7 	bl	8004844 <memset>
  if(huart->Instance==USART2)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <HAL_UART_MspInit+0xa8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d136      	bne.n	8000f0e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 fcfb 	bl	80028a8 <HAL_RCCEx_PeriphCLKConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb8:	f7ff fea6 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec0:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_UART_MspInit+0xac>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000eec:	230c      	movs	r3, #12
 8000eee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000efc:	2307      	movs	r3, #7
 8000efe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f000 fbd5 	bl	80016b8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f0e:	bf00      	nop
 8000f10:	3778      	adds	r7, #120	; 0x78
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40021000 	.word	0x40021000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f898 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_LTC_Pin);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f000 fd69 	bl	8001a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fac:	f7ff ffea 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f003 fc11 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fda:	f7ff fb41 	bl	8000660 <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   r0, =_estack
 8000fe0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000fec:	080048bc 	.word	0x080048bc
  ldr r2, =_sbss
 8000ff0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ff4:	200001e4 	.word	0x200001e4

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>

08000ffa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f95b 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100a:	200f      	movs	r0, #15
 800100c:	f000 f80e 	bl	800102c <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e001      	b.n	8001020 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101c:	f7ff fdfa 	bl	8000c14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001020:	79fb      	ldrb	r3, [r7, #7]

}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <HAL_InitTick+0x68>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d022      	beq.n	8001086 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_InitTick+0x6c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_InitTick+0x68>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800104c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f966 	bl	8001326 <HAL_SYSTICK_Config>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10f      	bne.n	8001080 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	d809      	bhi.n	800107a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001066:	2200      	movs	r2, #0
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	f04f 30ff 	mov.w	r0, #4294967295
 800106e:	f000 f932 	bl	80012d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_InitTick+0x70>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e007      	b.n	800108a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e004      	b.n	800108a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e001      	b.n	800108a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2000001c 	.word	0x2000001c
 8001098:	20000014 	.word	0x20000014
 800109c:	20000018 	.word	0x20000018

080010a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_IncTick+0x1c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_IncTick+0x20>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_IncTick+0x1c>)
 80010b0:	6013      	str	r3, [r2, #0]
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	200001e0 	.word	0x200001e0
 80010c0:	2000001c 	.word	0x2000001c

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200001e0 	.word	0x200001e0

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d004      	beq.n	8001100 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_Delay+0x40>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001100:	bf00      	nop
 8001102:	f7ff ffdf 	bl	80010c4 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	429a      	cmp	r2, r3
 8001110:	d8f7      	bhi.n	8001102 <HAL_Delay+0x26>
  {
  }
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000001c 	.word	0x2000001c

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	; (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff29 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff40 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff90 	bl	8001214 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5f 	bl	80011c0 <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff33 	bl	8001184 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa4 	bl	800127c <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e147      	b.n	80015e2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d106      	bne.n	800136c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fc78 	bl	8000c5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0210 	bic.w	r2, r2, #16
 800137a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800137c:	f7ff fea2 	bl	80010c4 <HAL_GetTick>
 8001380:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001382:	e012      	b.n	80013aa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001384:	f7ff fe9e 	bl	80010c4 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b0a      	cmp	r3, #10
 8001390:	d90b      	bls.n	80013aa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001396:	f043 0201 	orr.w	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2203      	movs	r2, #3
 80013a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e11b      	b.n	80015e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d0e5      	beq.n	8001384 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c8:	f7ff fe7c 	bl	80010c4 <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013ce:	e012      	b.n	80013f6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013d0:	f7ff fe78 	bl	80010c4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b0a      	cmp	r3, #10
 80013dc:	d90b      	bls.n	80013f6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e2:	f043 0201 	orr.w	r2, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2203      	movs	r2, #3
 80013ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0f5      	b.n	80015e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0e5      	beq.n	80013d0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	699a      	ldr	r2, [r3, #24]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0202 	orr.w	r2, r2, #2
 8001412:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a74      	ldr	r2, [pc, #464]	; (80015ec <HAL_FDCAN_Init+0x2ac>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d103      	bne.n	8001426 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800141e:	4a74      	ldr	r2, [pc, #464]	; (80015f0 <HAL_FDCAN_Init+0x2b0>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7c1b      	ldrb	r3, [r3, #16]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d108      	bne.n	8001440 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800143c:	619a      	str	r2, [r3, #24]
 800143e:	e007      	b.n	8001450 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800144e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7c5b      	ldrb	r3, [r3, #17]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d108      	bne.n	800146a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001466:	619a      	str	r2, [r3, #24]
 8001468:	e007      	b.n	800147a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	699a      	ldr	r2, [r3, #24]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001478:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7c9b      	ldrb	r3, [r3, #18]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699a      	ldr	r2, [r3, #24]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001490:	619a      	str	r2, [r3, #24]
 8001492:	e007      	b.n	80014a4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80014a2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80014c8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0210 	bic.w	r2, r2, #16
 80014d8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d108      	bne.n	80014f4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699a      	ldr	r2, [r3, #24]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0204 	orr.w	r2, r2, #4
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	e02c      	b.n	800154e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d028      	beq.n	800154e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d01c      	beq.n	800153e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001512:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0210 	orr.w	r2, r2, #16
 8001522:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d110      	bne.n	800154e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699a      	ldr	r2, [r3, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0220 	orr.w	r2, r2, #32
 800153a:	619a      	str	r2, [r3, #24]
 800153c:	e007      	b.n	800154e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699a      	ldr	r2, [r3, #24]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 0220 	orr.w	r2, r2, #32
 800154c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	3b01      	subs	r3, #1
 8001554:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	3b01      	subs	r3, #1
 800155c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800155e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001566:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	3b01      	subs	r3, #1
 8001570:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001576:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001578:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001582:	d115      	bne.n	80015b0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	3b01      	subs	r3, #1
 8001590:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001592:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	3b01      	subs	r3, #1
 800159a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800159c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	3b01      	subs	r3, #1
 80015a6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015ac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015ae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f814 	bl	80015f4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40006400 	.word	0x40006400
 80015f0:	40006500 	.word	0x40006500

080015f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80015fe:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a2b      	ldr	r2, [pc, #172]	; (80016b4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d103      	bne.n	8001612 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001610:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001620:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001628:	041a      	lsls	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001646:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	061a      	lsls	r2, r3, #24
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e005      	b.n	8001694 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3304      	adds	r3, #4
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d3f3      	bcc.n	8001688 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	4000a400 	.word	0x4000a400
 80016b4:	40006800 	.word	0x40006800

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016c6:	e15a      	b.n	800197e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2101      	movs	r1, #1
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	4013      	ands	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 814c 	beq.w	8001978 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d005      	beq.n	80016f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d130      	bne.n	800175a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800172e:	2201      	movs	r2, #1
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 0201 	and.w	r2, r3, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b03      	cmp	r3, #3
 8001764:	d017      	beq.n	8001796 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d123      	bne.n	80017ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	6939      	ldr	r1, [r7, #16]
 80017e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0203 	and.w	r2, r3, #3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80a6 	beq.w	8001978 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182c:	4b5b      	ldr	r3, [pc, #364]	; (800199c <HAL_GPIO_Init+0x2e4>)
 800182e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001830:	4a5a      	ldr	r2, [pc, #360]	; (800199c <HAL_GPIO_Init+0x2e4>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6613      	str	r3, [r2, #96]	; 0x60
 8001838:	4b58      	ldr	r3, [pc, #352]	; (800199c <HAL_GPIO_Init+0x2e4>)
 800183a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001844:	4a56      	ldr	r2, [pc, #344]	; (80019a0 <HAL_GPIO_Init+0x2e8>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800186e:	d01f      	beq.n	80018b0 <HAL_GPIO_Init+0x1f8>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <HAL_GPIO_Init+0x2ec>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d019      	beq.n	80018ac <HAL_GPIO_Init+0x1f4>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a4b      	ldr	r2, [pc, #300]	; (80019a8 <HAL_GPIO_Init+0x2f0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d013      	beq.n	80018a8 <HAL_GPIO_Init+0x1f0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a4a      	ldr	r2, [pc, #296]	; (80019ac <HAL_GPIO_Init+0x2f4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00d      	beq.n	80018a4 <HAL_GPIO_Init+0x1ec>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a49      	ldr	r2, [pc, #292]	; (80019b0 <HAL_GPIO_Init+0x2f8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d007      	beq.n	80018a0 <HAL_GPIO_Init+0x1e8>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a48      	ldr	r2, [pc, #288]	; (80019b4 <HAL_GPIO_Init+0x2fc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d101      	bne.n	800189c <HAL_GPIO_Init+0x1e4>
 8001898:	2305      	movs	r3, #5
 800189a:	e00a      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 800189c:	2306      	movs	r3, #6
 800189e:	e008      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 80018a0:	2304      	movs	r3, #4
 80018a2:	e006      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 80018a4:	2303      	movs	r3, #3
 80018a6:	e004      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e002      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_GPIO_Init+0x1fa>
 80018b0:	2300      	movs	r3, #0
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	f002 0203 	and.w	r2, r2, #3
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	4093      	lsls	r3, r2
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c2:	4937      	ldr	r1, [pc, #220]	; (80019a0 <HAL_GPIO_Init+0x2e8>)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d0:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <HAL_GPIO_Init+0x300>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018f4:	4a30      	ldr	r2, [pc, #192]	; (80019b8 <HAL_GPIO_Init+0x300>)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_GPIO_Init+0x300>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800191e:	4a26      	ldr	r2, [pc, #152]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <HAL_GPIO_Init+0x300>)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_GPIO_Init+0x300>)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	f47f ae9d 	bne.w	80016c8 <HAL_GPIO_Init+0x10>
  }
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000
 80019a4:	48000400 	.word	0x48000400
 80019a8:	48000800 	.word	0x48000800
 80019ac:	48000c00 	.word	0x48000c00
 80019b0:	48001000 	.word	0x48001000
 80019b4:	48001400 	.word	0x48001400
 80019b8:	40010400 	.word	0x40010400

080019bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e001      	b.n	80019de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43d9      	mvns	r1, r3
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	400b      	ands	r3, r1
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fdd6 	bl	8000620 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e08d      	b.n	8001bae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff f932 	bl	8000d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	; 0x24
 8001ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ad0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	e006      	b.n	8001b08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d108      	bne.n	8001b22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	e007      	b.n	8001b32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69d9      	ldr	r1, [r3, #28]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1a      	ldr	r2, [r3, #32]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d138      	bne.n	8001c3e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e032      	b.n	8001c40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2224      	movs	r2, #36	; 0x24
 8001be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c08:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c3e:	2302      	movs	r3, #2
  }
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b20      	cmp	r3, #32
 8001c60:	d139      	bne.n	8001cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e033      	b.n	8001cd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2224      	movs	r2, #36	; 0x24
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
  }
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d141      	bne.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cf2:	4b4b      	ldr	r3, [pc, #300]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfe:	d131      	bne.n	8001d64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d00:	4b47      	ldr	r3, [pc, #284]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d06:	4a46      	ldr	r2, [pc, #280]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d10:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d18:	4a41      	ldr	r2, [pc, #260]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d20:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2232      	movs	r2, #50	; 0x32
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	4a3f      	ldr	r2, [pc, #252]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	0c9b      	lsrs	r3, r3, #18
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d36:	e002      	b.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4a:	d102      	bne.n	8001d52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f2      	bne.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d52:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5e:	d158      	bne.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e057      	b.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d64:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d6a:	4a2d      	ldr	r2, [pc, #180]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d74:	e04d      	b.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7c:	d141      	bne.n	8001e02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8a:	d131      	bne.n	8001df0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d92:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d9c:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001daa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2232      	movs	r2, #50	; 0x32
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	0c9b      	lsrs	r3, r3, #18
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc2:	e002      	b.n	8001dca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd6:	d102      	bne.n	8001dde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f2      	bne.n	8001dc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dea:	d112      	bne.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e011      	b.n	8001e14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e00:	e007      	b.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40007000 	.word	0x40007000
 8001e24:	20000014 	.word	0x20000014
 8001e28:	431bde83 	.word	0x431bde83

08001e2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3a:	6093      	str	r3, [r2, #8]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40007000 	.word	0x40007000

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e2fe      	b.n	800245c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d075      	beq.n	8001f56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6a:	4b97      	ldr	r3, [pc, #604]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e74:	4b94      	ldr	r3, [pc, #592]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d102      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3e>
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d002      	beq.n	8001e90 <HAL_RCC_OscConfig+0x44>
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	4b8d      	ldr	r3, [pc, #564]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x108>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d157      	bne.n	8001f54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e2d9      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x74>
 8001eb2:	4b85      	ldr	r3, [pc, #532]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a84      	ldr	r2, [pc, #528]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x98>
 8001eca:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7e      	ldr	r2, [pc, #504]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b7c      	ldr	r3, [pc, #496]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a7b      	ldr	r2, [pc, #492]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xb0>
 8001ee4:	4b78      	ldr	r3, [pc, #480]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a77      	ldr	r2, [pc, #476]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b75      	ldr	r3, [pc, #468]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a74      	ldr	r2, [pc, #464]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff f8de 	bl	80010c4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff f8da 	bl	80010c4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e29e      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xc0>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f8ca 	bl	80010c4 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff f8c6 	bl	80010c4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e28a      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f46:	4b60      	ldr	r3, [pc, #384]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0xe8>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d075      	beq.n	800204e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f62:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f6c:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b0c      	cmp	r3, #12
 8001f7a:	d102      	bne.n	8001f82 <HAL_RCC_OscConfig+0x136>
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_OscConfig+0x13c>
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d11f      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f88:	4b4f      	ldr	r3, [pc, #316]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x154>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e25d      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b49      	ldr	r3, [pc, #292]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	061b      	lsls	r3, r3, #24
 8001fae:	4946      	ldr	r1, [pc, #280]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fb4:	4b45      	ldr	r3, [pc, #276]	; (80020cc <HAL_RCC_OscConfig+0x280>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f837 	bl	800102c <HAL_InitTick>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d043      	beq.n	800204c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e249      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d023      	beq.n	8002018 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a3c      	ldr	r2, [pc, #240]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f872 	bl	80010c4 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7ff f86e 	bl	80010c4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e232      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	061b      	lsls	r3, r3, #24
 8002010:	492d      	ldr	r1, [pc, #180]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
 8002016:	e01a      	b.n	800204e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 800201e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff f84e 	bl	80010c4 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202c:	f7ff f84a 	bl	80010c4 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e20e      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800203e:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x1e0>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800204c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d041      	beq.n	80020de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01c      	beq.n	800209c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 8002064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002068:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7ff f827 	bl	80010c4 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207a:	f7ff f823 	bl	80010c4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1e7      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ef      	beq.n	800207a <HAL_RCC_OscConfig+0x22e>
 800209a:	e020      	b.n	80020de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_RCC_OscConfig+0x27c>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ac:	f7ff f80a 	bl	80010c4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020b2:	e00d      	b.n	80020d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b4:	f7ff f806 	bl	80010c4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d906      	bls.n	80020d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1ca      	b.n	800245c <HAL_RCC_OscConfig+0x610>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d0:	4b8c      	ldr	r3, [pc, #560]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80020d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ea      	bne.n	80020b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80a6 	beq.w	8002238 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020f0:	4b84      	ldr	r3, [pc, #528]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_OscConfig+0x2b4>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x2b6>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00d      	beq.n	8002122 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b7f      	ldr	r3, [pc, #508]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	4a7e      	ldr	r2, [pc, #504]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	6593      	str	r3, [r2, #88]	; 0x58
 8002112:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002122:	4b79      	ldr	r3, [pc, #484]	; (8002308 <HAL_RCC_OscConfig+0x4bc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800212e:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_RCC_OscConfig+0x4bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a75      	ldr	r2, [pc, #468]	; (8002308 <HAL_RCC_OscConfig+0x4bc>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7fe ffc3 	bl	80010c4 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7fe ffbf 	bl	80010c4 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e183      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002154:	4b6c      	ldr	r3, [pc, #432]	; (8002308 <HAL_RCC_OscConfig+0x4bc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_RCC_OscConfig+0x32e>
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	4a65      	ldr	r2, [pc, #404]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002178:	e024      	b.n	80021c4 <HAL_RCC_OscConfig+0x378>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b05      	cmp	r3, #5
 8002180:	d110      	bne.n	80021a4 <HAL_RCC_OscConfig+0x358>
 8002182:	4b60      	ldr	r3, [pc, #384]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	4a5e      	ldr	r2, [pc, #376]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002192:	4b5c      	ldr	r3, [pc, #368]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	4a5a      	ldr	r2, [pc, #360]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a2:	e00f      	b.n	80021c4 <HAL_RCC_OscConfig+0x378>
 80021a4:	4b57      	ldr	r3, [pc, #348]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	4a56      	ldr	r2, [pc, #344]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ba:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d016      	beq.n	80021fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021cc:	f7fe ff7a 	bl	80010c4 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe ff76 	bl	80010c4 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e138      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ea:	4b46      	ldr	r3, [pc, #280]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ed      	beq.n	80021d4 <HAL_RCC_OscConfig+0x388>
 80021f8:	e015      	b.n	8002226 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fa:	f7fe ff63 	bl	80010c4 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe ff5f 	bl	80010c4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e121      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1ed      	bne.n	8002202 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002226:	7ffb      	ldrb	r3, [r7, #31]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222c:	4b35      	ldr	r3, [pc, #212]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	4a34      	ldr	r2, [pc, #208]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002236:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d03c      	beq.n	80022be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01c      	beq.n	8002286 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800224e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002252:	4a2c      	ldr	r2, [pc, #176]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225c:	f7fe ff32 	bl	80010c4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002264:	f7fe ff2e 	bl	80010c4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0f2      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002276:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002278:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ef      	beq.n	8002264 <HAL_RCC_OscConfig+0x418>
 8002284:	e01b      	b.n	80022be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002286:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 8002288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7fe ff15 	bl	80010c4 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800229e:	f7fe ff11 	bl	80010c4 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0d5      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80022b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ef      	bne.n	800229e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80c9 	beq.w	800245a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	f000 8083 	beq.w	80023dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d15e      	bne.n	800239c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <HAL_RCC_OscConfig+0x4b8>)
 80022e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7fe feeb 	bl	80010c4 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	e00c      	b.n	800230c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe fee7 	bl	80010c4 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d905      	bls.n	800230c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e0ab      	b.n	800245c <HAL_RCC_OscConfig+0x610>
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230c:	4b55      	ldr	r3, [pc, #340]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1ec      	bne.n	80022f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002318:	4b52      	ldr	r3, [pc, #328]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	4b52      	ldr	r3, [pc, #328]	; (8002468 <HAL_RCC_OscConfig+0x61c>)
 800231e:	4013      	ands	r3, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6a11      	ldr	r1, [r2, #32]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002328:	3a01      	subs	r2, #1
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	4311      	orrs	r1, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002332:	0212      	lsls	r2, r2, #8
 8002334:	4311      	orrs	r1, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800233a:	0852      	lsrs	r2, r2, #1
 800233c:	3a01      	subs	r2, #1
 800233e:	0552      	lsls	r2, r2, #21
 8002340:	4311      	orrs	r1, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002346:	0852      	lsrs	r2, r2, #1
 8002348:	3a01      	subs	r2, #1
 800234a:	0652      	lsls	r2, r2, #25
 800234c:	4311      	orrs	r1, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002352:	06d2      	lsls	r2, r2, #27
 8002354:	430a      	orrs	r2, r1
 8002356:	4943      	ldr	r1, [pc, #268]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 8002358:	4313      	orrs	r3, r2
 800235a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235c:	4b41      	ldr	r3, [pc, #260]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a40      	ldr	r2, [pc, #256]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002368:	4b3e      	ldr	r3, [pc, #248]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a3d      	ldr	r2, [pc, #244]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002372:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fea6 	bl	80010c4 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7fe fea2 	bl	80010c4 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e066      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238e:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x530>
 800239a:	e05e      	b.n	800245a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239c:	4b31      	ldr	r3, [pc, #196]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a30      	ldr	r2, [pc, #192]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 80023a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fe8c 	bl	80010c4 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe fe88 	bl	80010c4 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e04c      	b.n	800245c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c2:	4b28      	ldr	r3, [pc, #160]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80023ce:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4924      	ldr	r1, [pc, #144]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 80023d4:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_RCC_OscConfig+0x620>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
 80023da:	e03e      	b.n	800245a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e039      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023e8:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <HAL_RCC_OscConfig+0x618>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d12c      	bne.n	8002456 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	3b01      	subs	r3, #1
 8002408:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d123      	bne.n	8002456 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d11b      	bne.n	8002456 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d113      	bne.n	8002456 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	3b01      	subs	r3, #1
 800243c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d109      	bne.n	8002456 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	085b      	lsrs	r3, r3, #1
 800244e:	3b01      	subs	r3, #1
 8002450:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	019f800c 	.word	0x019f800c
 800246c:	feeefffc 	.word	0xfeeefffc

08002470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e11e      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b91      	ldr	r3, [pc, #580]	; (80026d0 <HAL_RCC_ClockConfig+0x260>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d910      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b8e      	ldr	r3, [pc, #568]	; (80026d0 <HAL_RCC_ClockConfig+0x260>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 020f 	bic.w	r2, r3, #15
 800249e:	498c      	ldr	r1, [pc, #560]	; (80026d0 <HAL_RCC_ClockConfig+0x260>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b8a      	ldr	r3, [pc, #552]	; (80026d0 <HAL_RCC_ClockConfig+0x260>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e106      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d073      	beq.n	80025ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d129      	bne.n	8002520 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024cc:	4b81      	ldr	r3, [pc, #516]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0f4      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024dc:	f000 f99e 	bl	800281c <RCC_GetSysClockFreqFromPLLSource>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4a7c      	ldr	r2, [pc, #496]	; (80026d8 <HAL_RCC_ClockConfig+0x268>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d93f      	bls.n	800256a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024ea:	4b7a      	ldr	r3, [pc, #488]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d033      	beq.n	800256a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	d12f      	bne.n	800256a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800250a:	4b72      	ldr	r3, [pc, #456]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002512:	4a70      	ldr	r2, [pc, #448]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002518:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	e024      	b.n	800256a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d107      	bne.n	8002538 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002528:	4b6a      	ldr	r3, [pc, #424]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0c6      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002538:	4b66      	ldr	r3, [pc, #408]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0be      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002548:	f000 f8ce 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800254c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4a61      	ldr	r2, [pc, #388]	; (80026d8 <HAL_RCC_ClockConfig+0x268>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d909      	bls.n	800256a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002556:	4b5f      	ldr	r3, [pc, #380]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800255e:	4a5d      	ldr	r2, [pc, #372]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002564:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800256a:	4b5a      	ldr	r3, [pc, #360]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f023 0203 	bic.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4957      	ldr	r1, [pc, #348]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800257c:	f7fe fda2 	bl	80010c4 <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	e00a      	b.n	800259a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7fe fd9e 	bl	80010c4 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e095      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	4b4e      	ldr	r3, [pc, #312]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 020c 	and.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d1eb      	bne.n	8002584 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d023      	beq.n	8002600 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	4b43      	ldr	r3, [pc, #268]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a42      	ldr	r2, [pc, #264]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025dc:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025e4:	4a3b      	ldr	r2, [pc, #236]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4936      	ldr	r1, [pc, #216]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
 80025fe:	e008      	b.n	8002612 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b80      	cmp	r3, #128	; 0x80
 8002604:	d105      	bne.n	8002612 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002606:	4b33      	ldr	r3, [pc, #204]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4a32      	ldr	r2, [pc, #200]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800260c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002610:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002612:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_RCC_ClockConfig+0x260>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d21d      	bcs.n	800265c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_RCC_ClockConfig+0x260>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 020f 	bic.w	r2, r3, #15
 8002628:	4929      	ldr	r1, [pc, #164]	; (80026d0 <HAL_RCC_ClockConfig+0x260>)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002630:	f7fe fd48 	bl	80010c4 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	e00a      	b.n	800264e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7fe fd44 	bl	80010c4 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e03b      	b.n	80026c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_RCC_ClockConfig+0x260>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d1ed      	bne.n	8002638 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4917      	ldr	r1, [pc, #92]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	490f      	ldr	r1, [pc, #60]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800269a:	f000 f825 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	490c      	ldr	r1, [pc, #48]	; (80026dc <HAL_RCC_ClockConfig+0x26c>)
 80026ac:	5ccb      	ldrb	r3, [r1, r3]
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <HAL_RCC_ClockConfig+0x270>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x274>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fcb4 	bl	800102c <HAL_InitTick>
 80026c4:	4603      	mov	r3, r0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40021000 	.word	0x40021000
 80026d8:	04c4b400 	.word	0x04c4b400
 80026dc:	0800486c 	.word	0x0800486c
 80026e0:	20000014 	.word	0x20000014
 80026e4:	20000018 	.word	0x20000018

080026e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026ee:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d102      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026fa:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	e047      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	d102      	bne.n	8002712 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	e03e      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002712:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d136      	bne.n	800278c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3301      	adds	r3, #1
 8002734:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d10c      	bne.n	8002756 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800273c:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002746:	68d2      	ldr	r2, [r2, #12]
 8002748:	0a12      	lsrs	r2, r2, #8
 800274a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
      break;
 8002754:	e00c      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002756:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002760:	68d2      	ldr	r2, [r2, #12]
 8002762:	0a12      	lsrs	r2, r2, #8
 8002764:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
      break;
 800276e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0e5b      	lsrs	r3, r3, #25
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	3301      	adds	r3, #1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	e001      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002790:	693b      	ldr	r3, [r7, #16]
}
 8002792:	4618      	mov	r0, r3
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	00f42400 	.word	0x00f42400
 80027a8:	007a1200 	.word	0x007a1200

080027ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000014 	.word	0x20000014

080027c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027c8:	f7ff fff0 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4904      	ldr	r1, [pc, #16]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	0800487c 	.word	0x0800487c

080027f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027f4:	f7ff ffda 	bl	80027ac <HAL_RCC_GetHCLKFreq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	0adb      	lsrs	r3, r3, #11
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	4904      	ldr	r1, [pc, #16]	; (8002818 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000
 8002818:	0800487c 	.word	0x0800487c

0800281c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002822:	4b1e      	ldr	r3, [pc, #120]	; (800289c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3301      	adds	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d10c      	bne.n	800285a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002840:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800284a:	68d2      	ldr	r2, [r2, #12]
 800284c:	0a12      	lsrs	r2, r2, #8
 800284e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	617b      	str	r3, [r7, #20]
    break;
 8002858:	e00c      	b.n	8002874 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	0a12      	lsrs	r2, r2, #8
 8002868:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
    break;
 8002872:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0e5b      	lsrs	r3, r3, #25
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	3301      	adds	r3, #1
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800288e:	687b      	ldr	r3, [r7, #4]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40021000 	.word	0x40021000
 80028a0:	007a1200 	.word	0x007a1200
 80028a4:	00f42400 	.word	0x00f42400

080028a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028b0:	2300      	movs	r3, #0
 80028b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028b4:	2300      	movs	r3, #0
 80028b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8098 	beq.w	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ca:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10d      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	4b40      	ldr	r3, [pc, #256]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	4a3f      	ldr	r2, [pc, #252]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6593      	str	r3, [r2, #88]	; 0x58
 80028e2:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ee:	2301      	movs	r3, #1
 80028f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f2:	4b3a      	ldr	r3, [pc, #232]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a39      	ldr	r2, [pc, #228]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028fe:	f7fe fbe1 	bl	80010c4 <HAL_GetTick>
 8002902:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002904:	e009      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7fe fbdd 	bl	80010c4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d902      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	74fb      	strb	r3, [r7, #19]
        break;
 8002918:	e005      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800291a:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0ef      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d159      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800292c:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002936:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01e      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	429a      	cmp	r2, r3
 8002946:	d019      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002952:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002964:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fe fb9d 	bl	80010c4 <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298c:	e00b      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe fb99 	bl	80010c4 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d902      	bls.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	74fb      	strb	r3, [r7, #19]
            break;
 80029a4:	e006      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ec      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10b      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	4903      	ldr	r1, [pc, #12]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029d0:	e008      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029d2:	7cfb      	ldrb	r3, [r7, #19]
 80029d4:	74bb      	strb	r3, [r7, #18]
 80029d6:	e005      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e4:	7c7b      	ldrb	r3, [r7, #17]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ea:	4ba7      	ldr	r3, [pc, #668]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	4aa6      	ldr	r2, [pc, #664]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a02:	4ba1      	ldr	r3, [pc, #644]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	f023 0203 	bic.w	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	499d      	ldr	r1, [pc, #628]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a24:	4b98      	ldr	r3, [pc, #608]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f023 020c 	bic.w	r2, r3, #12
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4995      	ldr	r1, [pc, #596]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a46:	4b90      	ldr	r3, [pc, #576]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	498c      	ldr	r1, [pc, #560]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a68:	4b87      	ldr	r3, [pc, #540]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	4984      	ldr	r1, [pc, #528]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a8a:	4b7f      	ldr	r3, [pc, #508]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	497b      	ldr	r1, [pc, #492]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aac:	4b76      	ldr	r3, [pc, #472]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	4973      	ldr	r1, [pc, #460]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ace:	4b6e      	ldr	r3, [pc, #440]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	496a      	ldr	r1, [pc, #424]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002af0:	4b65      	ldr	r3, [pc, #404]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4962      	ldr	r1, [pc, #392]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b12:	4b5d      	ldr	r3, [pc, #372]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	4959      	ldr	r1, [pc, #356]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b34:	4b54      	ldr	r3, [pc, #336]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	4951      	ldr	r1, [pc, #324]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d015      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b56:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	4948      	ldr	r1, [pc, #288]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b74:	d105      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b76:	4b44      	ldr	r3, [pc, #272]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4a43      	ldr	r2, [pc, #268]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b80:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b8e:	4b3e      	ldr	r3, [pc, #248]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	493a      	ldr	r1, [pc, #232]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bac:	d105      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bae:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4a35      	ldr	r2, [pc, #212]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb8:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d015      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bc6:	4b30      	ldr	r3, [pc, #192]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bcc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd4:	492c      	ldr	r1, [pc, #176]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be4:	d105      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d015      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	491e      	ldr	r1, [pc, #120]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c1c:	d105      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	4a19      	ldr	r2, [pc, #100]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c28:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d015      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	4910      	ldr	r1, [pc, #64]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c54:	d105      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	4a0b      	ldr	r2, [pc, #44]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c60:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d018      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	4902      	ldr	r1, [pc, #8]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	e001      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c92:	d105      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c94:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a20      	ldr	r2, [pc, #128]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d015      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	4918      	ldr	r1, [pc, #96]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cca:	d105      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d015      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf2:	490a      	ldr	r1, [pc, #40]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d02:	d105      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d10:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000

08002d20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e049      	b.n	8002dc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe f83a 	bl	8000dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4610      	mov	r0, r2
 8002d60:	f000 fa56 	bl	8003210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_TIM_PWM_Start+0x24>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e03c      	b.n	8002e6e <HAL_TIM_PWM_Start+0x9e>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d109      	bne.n	8002e0e <HAL_TIM_PWM_Start+0x3e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	bf14      	ite	ne
 8002e06:	2301      	movne	r3, #1
 8002e08:	2300      	moveq	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	e02f      	b.n	8002e6e <HAL_TIM_PWM_Start+0x9e>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d109      	bne.n	8002e28 <HAL_TIM_PWM_Start+0x58>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	bf14      	ite	ne
 8002e20:	2301      	movne	r3, #1
 8002e22:	2300      	moveq	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e022      	b.n	8002e6e <HAL_TIM_PWM_Start+0x9e>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d109      	bne.n	8002e42 <HAL_TIM_PWM_Start+0x72>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	e015      	b.n	8002e6e <HAL_TIM_PWM_Start+0x9e>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d109      	bne.n	8002e5c <HAL_TIM_PWM_Start+0x8c>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e008      	b.n	8002e6e <HAL_TIM_PWM_Start+0x9e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0a1      	b.n	8002fba <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <HAL_TIM_PWM_Start+0xb6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e84:	e023      	b.n	8002ece <HAL_TIM_PWM_Start+0xfe>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d104      	bne.n	8002e96 <HAL_TIM_PWM_Start+0xc6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e94:	e01b      	b.n	8002ece <HAL_TIM_PWM_Start+0xfe>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d104      	bne.n	8002ea6 <HAL_TIM_PWM_Start+0xd6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	e013      	b.n	8002ece <HAL_TIM_PWM_Start+0xfe>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	d104      	bne.n	8002eb6 <HAL_TIM_PWM_Start+0xe6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eb4:	e00b      	b.n	8002ece <HAL_TIM_PWM_Start+0xfe>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0xf6>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec4:	e003      	b.n	8002ece <HAL_TIM_PWM_Start+0xfe>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	6839      	ldr	r1, [r7, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fd6e 	bl	80039b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a38      	ldr	r2, [pc, #224]	; (8002fc4 <HAL_TIM_PWM_Start+0x1f4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d018      	beq.n	8002f18 <HAL_TIM_PWM_Start+0x148>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a37      	ldr	r2, [pc, #220]	; (8002fc8 <HAL_TIM_PWM_Start+0x1f8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d013      	beq.n	8002f18 <HAL_TIM_PWM_Start+0x148>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a35      	ldr	r2, [pc, #212]	; (8002fcc <HAL_TIM_PWM_Start+0x1fc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00e      	beq.n	8002f18 <HAL_TIM_PWM_Start+0x148>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a34      	ldr	r2, [pc, #208]	; (8002fd0 <HAL_TIM_PWM_Start+0x200>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_TIM_PWM_Start+0x148>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a32      	ldr	r2, [pc, #200]	; (8002fd4 <HAL_TIM_PWM_Start+0x204>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_TIM_PWM_Start+0x148>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a31      	ldr	r2, [pc, #196]	; (8002fd8 <HAL_TIM_PWM_Start+0x208>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <HAL_TIM_PWM_Start+0x14c>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <HAL_TIM_PWM_Start+0x14e>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a23      	ldr	r2, [pc, #140]	; (8002fc4 <HAL_TIM_PWM_Start+0x1f4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d01d      	beq.n	8002f78 <HAL_TIM_PWM_Start+0x1a8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f44:	d018      	beq.n	8002f78 <HAL_TIM_PWM_Start+0x1a8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a24      	ldr	r2, [pc, #144]	; (8002fdc <HAL_TIM_PWM_Start+0x20c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d013      	beq.n	8002f78 <HAL_TIM_PWM_Start+0x1a8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_TIM_PWM_Start+0x210>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00e      	beq.n	8002f78 <HAL_TIM_PWM_Start+0x1a8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <HAL_TIM_PWM_Start+0x1f8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d009      	beq.n	8002f78 <HAL_TIM_PWM_Start+0x1a8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <HAL_TIM_PWM_Start+0x1fc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIM_PWM_Start+0x1a8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_TIM_PWM_Start+0x208>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d115      	bne.n	8002fa4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_TIM_PWM_Start+0x214>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d015      	beq.n	8002fb6 <HAL_TIM_PWM_Start+0x1e6>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f90:	d011      	beq.n	8002fb6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f042 0201 	orr.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa2:	e008      	b.n	8002fb6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e000      	b.n	8002fb8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40013400 	.word	0x40013400
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40014400 	.word	0x40014400
 8002fd4:	40014800 	.word	0x40014800
 8002fd8:	40015000 	.word	0x40015000
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	00010007 	.word	0x00010007

08002fe8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003002:	2302      	movs	r3, #2
 8003004:	e0ff      	b.n	8003206 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b14      	cmp	r3, #20
 8003012:	f200 80f0 	bhi.w	80031f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003016:	a201      	add	r2, pc, #4	; (adr r2, 800301c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003071 	.word	0x08003071
 8003020:	080031f7 	.word	0x080031f7
 8003024:	080031f7 	.word	0x080031f7
 8003028:	080031f7 	.word	0x080031f7
 800302c:	080030b1 	.word	0x080030b1
 8003030:	080031f7 	.word	0x080031f7
 8003034:	080031f7 	.word	0x080031f7
 8003038:	080031f7 	.word	0x080031f7
 800303c:	080030f3 	.word	0x080030f3
 8003040:	080031f7 	.word	0x080031f7
 8003044:	080031f7 	.word	0x080031f7
 8003048:	080031f7 	.word	0x080031f7
 800304c:	08003133 	.word	0x08003133
 8003050:	080031f7 	.word	0x080031f7
 8003054:	080031f7 	.word	0x080031f7
 8003058:	080031f7 	.word	0x080031f7
 800305c:	08003175 	.word	0x08003175
 8003060:	080031f7 	.word	0x080031f7
 8003064:	080031f7 	.word	0x080031f7
 8003068:	080031f7 	.word	0x080031f7
 800306c:	080031b5 	.word	0x080031b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f974 	bl	8003364 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0208 	orr.w	r2, r2, #8
 800308a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0204 	bic.w	r2, r2, #4
 800309a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6999      	ldr	r1, [r3, #24]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	619a      	str	r2, [r3, #24]
      break;
 80030ae:	e0a5      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f9ee 	bl	8003498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6999      	ldr	r1, [r3, #24]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	021a      	lsls	r2, r3, #8
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	619a      	str	r2, [r3, #24]
      break;
 80030f0:	e084      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fa61 	bl	80035c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0208 	orr.w	r2, r2, #8
 800310c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0204 	bic.w	r2, r2, #4
 800311c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69d9      	ldr	r1, [r3, #28]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	61da      	str	r2, [r3, #28]
      break;
 8003130:	e064      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fad3 	bl	80036e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800314c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69d9      	ldr	r1, [r3, #28]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	021a      	lsls	r2, r3, #8
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	61da      	str	r2, [r3, #28]
      break;
 8003172:	e043      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fb46 	bl	800380c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0208 	orr.w	r2, r2, #8
 800318e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0204 	bic.w	r2, r2, #4
 800319e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80031b2:	e023      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fb90 	bl	80038e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	021a      	lsls	r2, r3, #8
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80031f4:	e002      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	75fb      	strb	r3, [r7, #23]
      break;
 80031fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003204:	7dfb      	ldrb	r3, [r7, #23]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop

08003210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a48      	ldr	r2, [pc, #288]	; (8003344 <TIM_Base_SetConfig+0x134>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322e:	d00f      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a45      	ldr	r2, [pc, #276]	; (8003348 <TIM_Base_SetConfig+0x138>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00b      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a44      	ldr	r2, [pc, #272]	; (800334c <TIM_Base_SetConfig+0x13c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a43      	ldr	r2, [pc, #268]	; (8003350 <TIM_Base_SetConfig+0x140>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a42      	ldr	r2, [pc, #264]	; (8003354 <TIM_Base_SetConfig+0x144>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d108      	bne.n	8003262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a37      	ldr	r2, [pc, #220]	; (8003344 <TIM_Base_SetConfig+0x134>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01f      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d01b      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a34      	ldr	r2, [pc, #208]	; (8003348 <TIM_Base_SetConfig+0x138>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d017      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a33      	ldr	r2, [pc, #204]	; (800334c <TIM_Base_SetConfig+0x13c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a32      	ldr	r2, [pc, #200]	; (8003350 <TIM_Base_SetConfig+0x140>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00f      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a32      	ldr	r2, [pc, #200]	; (8003358 <TIM_Base_SetConfig+0x148>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00b      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a31      	ldr	r2, [pc, #196]	; (800335c <TIM_Base_SetConfig+0x14c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a30      	ldr	r2, [pc, #192]	; (8003360 <TIM_Base_SetConfig+0x150>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_Base_SetConfig+0x9a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <TIM_Base_SetConfig+0x144>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d108      	bne.n	80032bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a18      	ldr	r2, [pc, #96]	; (8003344 <TIM_Base_SetConfig+0x134>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <TIM_Base_SetConfig+0x100>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a19      	ldr	r2, [pc, #100]	; (8003350 <TIM_Base_SetConfig+0x140>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00f      	beq.n	8003310 <TIM_Base_SetConfig+0x100>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a19      	ldr	r2, [pc, #100]	; (8003358 <TIM_Base_SetConfig+0x148>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00b      	beq.n	8003310 <TIM_Base_SetConfig+0x100>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a18      	ldr	r2, [pc, #96]	; (800335c <TIM_Base_SetConfig+0x14c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d007      	beq.n	8003310 <TIM_Base_SetConfig+0x100>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a17      	ldr	r2, [pc, #92]	; (8003360 <TIM_Base_SetConfig+0x150>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_Base_SetConfig+0x100>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <TIM_Base_SetConfig+0x144>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d103      	bne.n	8003318 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f023 0201 	bic.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	611a      	str	r2, [r3, #16]
  }
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800
 8003350:	40013400 	.word	0x40013400
 8003354:	40015000 	.word	0x40015000
 8003358:	40014000 	.word	0x40014000
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800

08003364 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f023 0201 	bic.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f023 0302 	bic.w	r3, r3, #2
 80033b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a30      	ldr	r2, [pc, #192]	; (8003480 <TIM_OC1_SetConfig+0x11c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <TIM_OC1_SetConfig+0x88>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a2f      	ldr	r2, [pc, #188]	; (8003484 <TIM_OC1_SetConfig+0x120>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00f      	beq.n	80033ec <TIM_OC1_SetConfig+0x88>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a2e      	ldr	r2, [pc, #184]	; (8003488 <TIM_OC1_SetConfig+0x124>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00b      	beq.n	80033ec <TIM_OC1_SetConfig+0x88>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a2d      	ldr	r2, [pc, #180]	; (800348c <TIM_OC1_SetConfig+0x128>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d007      	beq.n	80033ec <TIM_OC1_SetConfig+0x88>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a2c      	ldr	r2, [pc, #176]	; (8003490 <TIM_OC1_SetConfig+0x12c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d003      	beq.n	80033ec <TIM_OC1_SetConfig+0x88>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <TIM_OC1_SetConfig+0x130>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10c      	bne.n	8003406 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0308 	bic.w	r3, r3, #8
 80033f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 0304 	bic.w	r3, r3, #4
 8003404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <TIM_OC1_SetConfig+0x11c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <TIM_OC1_SetConfig+0xd2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1c      	ldr	r2, [pc, #112]	; (8003484 <TIM_OC1_SetConfig+0x120>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00f      	beq.n	8003436 <TIM_OC1_SetConfig+0xd2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1b      	ldr	r2, [pc, #108]	; (8003488 <TIM_OC1_SetConfig+0x124>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00b      	beq.n	8003436 <TIM_OC1_SetConfig+0xd2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1a      	ldr	r2, [pc, #104]	; (800348c <TIM_OC1_SetConfig+0x128>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <TIM_OC1_SetConfig+0xd2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a19      	ldr	r2, [pc, #100]	; (8003490 <TIM_OC1_SetConfig+0x12c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <TIM_OC1_SetConfig+0xd2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a18      	ldr	r2, [pc, #96]	; (8003494 <TIM_OC1_SetConfig+0x130>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d111      	bne.n	800345a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800343c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	621a      	str	r2, [r3, #32]
}
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40013400 	.word	0x40013400
 8003488:	40014000 	.word	0x40014000
 800348c:	40014400 	.word	0x40014400
 8003490:	40014800 	.word	0x40014800
 8003494:	40015000 	.word	0x40015000

08003498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f023 0210 	bic.w	r2, r3, #16
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0320 	bic.w	r3, r3, #32
 80034e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a2c      	ldr	r2, [pc, #176]	; (80035a8 <TIM_OC2_SetConfig+0x110>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <TIM_OC2_SetConfig+0x74>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <TIM_OC2_SetConfig+0x114>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_OC2_SetConfig+0x74>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a2a      	ldr	r2, [pc, #168]	; (80035b0 <TIM_OC2_SetConfig+0x118>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d10d      	bne.n	8003528 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003526:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a1f      	ldr	r2, [pc, #124]	; (80035a8 <TIM_OC2_SetConfig+0x110>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d013      	beq.n	8003558 <TIM_OC2_SetConfig+0xc0>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a1e      	ldr	r2, [pc, #120]	; (80035ac <TIM_OC2_SetConfig+0x114>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00f      	beq.n	8003558 <TIM_OC2_SetConfig+0xc0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <TIM_OC2_SetConfig+0x11c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00b      	beq.n	8003558 <TIM_OC2_SetConfig+0xc0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <TIM_OC2_SetConfig+0x120>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d007      	beq.n	8003558 <TIM_OC2_SetConfig+0xc0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <TIM_OC2_SetConfig+0x124>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <TIM_OC2_SetConfig+0xc0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <TIM_OC2_SetConfig+0x118>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d113      	bne.n	8003580 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800355e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40013400 	.word	0x40013400
 80035b0:	40015000 	.word	0x40015000
 80035b4:	40014000 	.word	0x40014000
 80035b8:	40014400 	.word	0x40014400
 80035bc:	40014800 	.word	0x40014800

080035c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0303 	bic.w	r3, r3, #3
 80035fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800360c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2b      	ldr	r2, [pc, #172]	; (80036cc <TIM_OC3_SetConfig+0x10c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <TIM_OC3_SetConfig+0x72>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2a      	ldr	r2, [pc, #168]	; (80036d0 <TIM_OC3_SetConfig+0x110>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <TIM_OC3_SetConfig+0x72>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <TIM_OC3_SetConfig+0x114>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10d      	bne.n	800364e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800364c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <TIM_OC3_SetConfig+0x10c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <TIM_OC3_SetConfig+0xbe>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <TIM_OC3_SetConfig+0x110>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00f      	beq.n	800367e <TIM_OC3_SetConfig+0xbe>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <TIM_OC3_SetConfig+0x118>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_OC3_SetConfig+0xbe>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <TIM_OC3_SetConfig+0x11c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <TIM_OC3_SetConfig+0xbe>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <TIM_OC3_SetConfig+0x120>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_OC3_SetConfig+0xbe>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a16      	ldr	r2, [pc, #88]	; (80036d4 <TIM_OC3_SetConfig+0x114>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d113      	bne.n	80036a6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800368c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	621a      	str	r2, [r3, #32]
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40013400 	.word	0x40013400
 80036d4:	40015000 	.word	0x40015000
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40014400 	.word	0x40014400
 80036e0:	40014800 	.word	0x40014800

080036e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	031b      	lsls	r3, r3, #12
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <TIM_OC4_SetConfig+0x110>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_OC4_SetConfig+0x74>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a2b      	ldr	r2, [pc, #172]	; (80037f8 <TIM_OC4_SetConfig+0x114>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_OC4_SetConfig+0x74>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <TIM_OC4_SetConfig+0x118>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d10d      	bne.n	8003774 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800375e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	031b      	lsls	r3, r3, #12
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003772:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <TIM_OC4_SetConfig+0x110>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <TIM_OC4_SetConfig+0xc0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <TIM_OC4_SetConfig+0x114>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00f      	beq.n	80037a4 <TIM_OC4_SetConfig+0xc0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <TIM_OC4_SetConfig+0x11c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00b      	beq.n	80037a4 <TIM_OC4_SetConfig+0xc0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <TIM_OC4_SetConfig+0x120>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d007      	beq.n	80037a4 <TIM_OC4_SetConfig+0xc0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <TIM_OC4_SetConfig+0x124>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_OC4_SetConfig+0xc0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a17      	ldr	r2, [pc, #92]	; (80037fc <TIM_OC4_SetConfig+0x118>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d113      	bne.n	80037cc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	019b      	lsls	r3, r3, #6
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40013400 	.word	0x40013400
 80037fc:	40015000 	.word	0x40015000
 8003800:	40014000 	.word	0x40014000
 8003804:	40014400 	.word	0x40014400
 8003808:	40014800 	.word	0x40014800

0800380c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003850:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	041b      	lsls	r3, r3, #16
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <TIM_OC5_SetConfig+0xbc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <TIM_OC5_SetConfig+0x82>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a18      	ldr	r2, [pc, #96]	; (80038cc <TIM_OC5_SetConfig+0xc0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00f      	beq.n	800388e <TIM_OC5_SetConfig+0x82>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <TIM_OC5_SetConfig+0xc4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00b      	beq.n	800388e <TIM_OC5_SetConfig+0x82>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <TIM_OC5_SetConfig+0xc8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <TIM_OC5_SetConfig+0x82>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <TIM_OC5_SetConfig+0xcc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d003      	beq.n	800388e <TIM_OC5_SetConfig+0x82>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a14      	ldr	r2, [pc, #80]	; (80038dc <TIM_OC5_SetConfig+0xd0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d109      	bne.n	80038a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003894:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	621a      	str	r2, [r3, #32]
}
 80038bc:	bf00      	nop
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	40012c00 	.word	0x40012c00
 80038cc:	40013400 	.word	0x40013400
 80038d0:	40014000 	.word	0x40014000
 80038d4:	40014400 	.word	0x40014400
 80038d8:	40014800 	.word	0x40014800
 80038dc:	40015000 	.word	0x40015000

080038e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	051b      	lsls	r3, r3, #20
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a1a      	ldr	r2, [pc, #104]	; (80039a0 <TIM_OC6_SetConfig+0xc0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <TIM_OC6_SetConfig+0x84>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <TIM_OC6_SetConfig+0xc4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00f      	beq.n	8003964 <TIM_OC6_SetConfig+0x84>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <TIM_OC6_SetConfig+0xc8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00b      	beq.n	8003964 <TIM_OC6_SetConfig+0x84>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a17      	ldr	r2, [pc, #92]	; (80039ac <TIM_OC6_SetConfig+0xcc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d007      	beq.n	8003964 <TIM_OC6_SetConfig+0x84>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <TIM_OC6_SetConfig+0xd0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_OC6_SetConfig+0x84>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <TIM_OC6_SetConfig+0xd4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d109      	bne.n	8003978 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	029b      	lsls	r3, r3, #10
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40013400 	.word	0x40013400
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800
 80039b4:	40015000 	.word	0x40015000

080039b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2201      	movs	r2, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	43db      	mvns	r3, r3
 80039da:	401a      	ands	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e06f      	b.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a31      	ldr	r2, [pc, #196]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a30      	ldr	r2, [pc, #192]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d01d      	beq.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d018      	beq.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d013      	beq.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00e      	beq.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d009      	beq.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a16      	ldr	r2, [pc, #88]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a11      	ldr	r2, [pc, #68]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d10c      	bne.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	40013400 	.word	0x40013400
 8003b10:	40015000 	.word	0x40015000
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40000800 	.word	0x40000800
 8003b1c:	40014000 	.word	0x40014000

08003b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e042      	b.n	8003bb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d106      	bne.n	8003b4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7fd f993 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2224      	movs	r2, #36	; 0x24
 8003b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0201 	bic.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fb24 	bl	80041b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f825 	bl	8003bc0 <UART_SetConfig>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e01b      	b.n	8003bb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fba3 	bl	80042fc <UART_CheckIdleState>
 8003bb6:	4603      	mov	r3, r0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc4:	b08c      	sub	sp, #48	; 0x30
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4baa      	ldr	r3, [pc, #680]	; (8003e98 <UART_SetConfig+0x2d8>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a9f      	ldr	r2, [pc, #636]	; (8003e9c <UART_SetConfig+0x2dc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	f023 010f 	bic.w	r1, r3, #15
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a90      	ldr	r2, [pc, #576]	; (8003ea0 <UART_SetConfig+0x2e0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d125      	bne.n	8003cb0 <UART_SetConfig+0xf0>
 8003c64:	4b8f      	ldr	r3, [pc, #572]	; (8003ea4 <UART_SetConfig+0x2e4>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d81a      	bhi.n	8003ca8 <UART_SetConfig+0xe8>
 8003c72:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <UART_SetConfig+0xb8>)
 8003c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c78:	08003c89 	.word	0x08003c89
 8003c7c:	08003c99 	.word	0x08003c99
 8003c80:	08003c91 	.word	0x08003c91
 8003c84:	08003ca1 	.word	0x08003ca1
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e116      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003c90:	2302      	movs	r3, #2
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c96:	e112      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	e10e      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca6:	e10a      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cae:	e106      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a7c      	ldr	r2, [pc, #496]	; (8003ea8 <UART_SetConfig+0x2e8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d138      	bne.n	8003d2c <UART_SetConfig+0x16c>
 8003cba:	4b7a      	ldr	r3, [pc, #488]	; (8003ea4 <UART_SetConfig+0x2e4>)
 8003cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	d82d      	bhi.n	8003d24 <UART_SetConfig+0x164>
 8003cc8:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <UART_SetConfig+0x110>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003d05 	.word	0x08003d05
 8003cd4:	08003d25 	.word	0x08003d25
 8003cd8:	08003d25 	.word	0x08003d25
 8003cdc:	08003d25 	.word	0x08003d25
 8003ce0:	08003d15 	.word	0x08003d15
 8003ce4:	08003d25 	.word	0x08003d25
 8003ce8:	08003d25 	.word	0x08003d25
 8003cec:	08003d25 	.word	0x08003d25
 8003cf0:	08003d0d 	.word	0x08003d0d
 8003cf4:	08003d25 	.word	0x08003d25
 8003cf8:	08003d25 	.word	0x08003d25
 8003cfc:	08003d25 	.word	0x08003d25
 8003d00:	08003d1d 	.word	0x08003d1d
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	e0d8      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d12:	e0d4      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003d14:	2304      	movs	r3, #4
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1a:	e0d0      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d22:	e0cc      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003d24:	2310      	movs	r3, #16
 8003d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2a:	e0c8      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a5e      	ldr	r2, [pc, #376]	; (8003eac <UART_SetConfig+0x2ec>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d125      	bne.n	8003d82 <UART_SetConfig+0x1c2>
 8003d36:	4b5b      	ldr	r3, [pc, #364]	; (8003ea4 <UART_SetConfig+0x2e4>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d40:	2b30      	cmp	r3, #48	; 0x30
 8003d42:	d016      	beq.n	8003d72 <UART_SetConfig+0x1b2>
 8003d44:	2b30      	cmp	r3, #48	; 0x30
 8003d46:	d818      	bhi.n	8003d7a <UART_SetConfig+0x1ba>
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d00a      	beq.n	8003d62 <UART_SetConfig+0x1a2>
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d814      	bhi.n	8003d7a <UART_SetConfig+0x1ba>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <UART_SetConfig+0x19a>
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d008      	beq.n	8003d6a <UART_SetConfig+0x1aa>
 8003d58:	e00f      	b.n	8003d7a <UART_SetConfig+0x1ba>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d60:	e0ad      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003d62:	2302      	movs	r3, #2
 8003d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d68:	e0a9      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d70:	e0a5      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003d72:	2308      	movs	r3, #8
 8003d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d78:	e0a1      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003d7a:	2310      	movs	r3, #16
 8003d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d80:	e09d      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a4a      	ldr	r2, [pc, #296]	; (8003eb0 <UART_SetConfig+0x2f0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d125      	bne.n	8003dd8 <UART_SetConfig+0x218>
 8003d8c:	4b45      	ldr	r3, [pc, #276]	; (8003ea4 <UART_SetConfig+0x2e4>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d96:	2bc0      	cmp	r3, #192	; 0xc0
 8003d98:	d016      	beq.n	8003dc8 <UART_SetConfig+0x208>
 8003d9a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d9c:	d818      	bhi.n	8003dd0 <UART_SetConfig+0x210>
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	d00a      	beq.n	8003db8 <UART_SetConfig+0x1f8>
 8003da2:	2b80      	cmp	r3, #128	; 0x80
 8003da4:	d814      	bhi.n	8003dd0 <UART_SetConfig+0x210>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <UART_SetConfig+0x1f0>
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d008      	beq.n	8003dc0 <UART_SetConfig+0x200>
 8003dae:	e00f      	b.n	8003dd0 <UART_SetConfig+0x210>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db6:	e082      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003db8:	2302      	movs	r3, #2
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dbe:	e07e      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc6:	e07a      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dce:	e076      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd6:	e072      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a35      	ldr	r2, [pc, #212]	; (8003eb4 <UART_SetConfig+0x2f4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d12a      	bne.n	8003e38 <UART_SetConfig+0x278>
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <UART_SetConfig+0x2e4>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df0:	d01a      	beq.n	8003e28 <UART_SetConfig+0x268>
 8003df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df6:	d81b      	bhi.n	8003e30 <UART_SetConfig+0x270>
 8003df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfc:	d00c      	beq.n	8003e18 <UART_SetConfig+0x258>
 8003dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e02:	d815      	bhi.n	8003e30 <UART_SetConfig+0x270>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <UART_SetConfig+0x250>
 8003e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0c:	d008      	beq.n	8003e20 <UART_SetConfig+0x260>
 8003e0e:	e00f      	b.n	8003e30 <UART_SetConfig+0x270>
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e16:	e052      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e1e:	e04e      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003e20:	2304      	movs	r3, #4
 8003e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e26:	e04a      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003e28:	2308      	movs	r3, #8
 8003e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e2e:	e046      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003e30:	2310      	movs	r3, #16
 8003e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e36:	e042      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <UART_SetConfig+0x2dc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d13a      	bne.n	8003eb8 <UART_SetConfig+0x2f8>
 8003e42:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <UART_SetConfig+0x2e4>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e50:	d01a      	beq.n	8003e88 <UART_SetConfig+0x2c8>
 8003e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e56:	d81b      	bhi.n	8003e90 <UART_SetConfig+0x2d0>
 8003e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5c:	d00c      	beq.n	8003e78 <UART_SetConfig+0x2b8>
 8003e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e62:	d815      	bhi.n	8003e90 <UART_SetConfig+0x2d0>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <UART_SetConfig+0x2b0>
 8003e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6c:	d008      	beq.n	8003e80 <UART_SetConfig+0x2c0>
 8003e6e:	e00f      	b.n	8003e90 <UART_SetConfig+0x2d0>
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e76:	e022      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e7e:	e01e      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003e80:	2304      	movs	r3, #4
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e86:	e01a      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003e88:	2308      	movs	r3, #8
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e8e:	e016      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003e90:	2310      	movs	r3, #16
 8003e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e96:	e012      	b.n	8003ebe <UART_SetConfig+0x2fe>
 8003e98:	cfff69f3 	.word	0xcfff69f3
 8003e9c:	40008000 	.word	0x40008000
 8003ea0:	40013800 	.word	0x40013800
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40004400 	.word	0x40004400
 8003eac:	40004800 	.word	0x40004800
 8003eb0:	40004c00 	.word	0x40004c00
 8003eb4:	40005000 	.word	0x40005000
 8003eb8:	2310      	movs	r3, #16
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4aae      	ldr	r2, [pc, #696]	; (800417c <UART_SetConfig+0x5bc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	f040 8097 	bne.w	8003ff8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003eca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d823      	bhi.n	8003f1a <UART_SetConfig+0x35a>
 8003ed2:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <UART_SetConfig+0x318>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f1b 	.word	0x08003f1b
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003f1b 	.word	0x08003f1b
 8003ee8:	08003f0b 	.word	0x08003f0b
 8003eec:	08003f1b 	.word	0x08003f1b
 8003ef0:	08003f1b 	.word	0x08003f1b
 8003ef4:	08003f1b 	.word	0x08003f1b
 8003ef8:	08003f13 	.word	0x08003f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe fc62 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8003f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f02:	e010      	b.n	8003f26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f04:	4b9e      	ldr	r3, [pc, #632]	; (8004180 <UART_SetConfig+0x5c0>)
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f08:	e00d      	b.n	8003f26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0a:	f7fe fbed 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 8003f0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f10:	e009      	b.n	8003f26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f18:	e005      	b.n	8003f26 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 8130 	beq.w	800418e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	4a94      	ldr	r2, [pc, #592]	; (8004184 <UART_SetConfig+0x5c4>)
 8003f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d305      	bcc.n	8003f5e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d903      	bls.n	8003f66 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f64:	e113      	b.n	800418e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	2200      	movs	r2, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	60fa      	str	r2, [r7, #12]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	4a84      	ldr	r2, [pc, #528]	; (8004184 <UART_SetConfig+0x5c4>)
 8003f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f88:	f7fc f946 	bl	8000218 <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4610      	mov	r0, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	020b      	lsls	r3, r1, #8
 8003f9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fa2:	0202      	lsls	r2, r0, #8
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	6849      	ldr	r1, [r1, #4]
 8003fa8:	0849      	lsrs	r1, r1, #1
 8003faa:	2000      	movs	r0, #0
 8003fac:	460c      	mov	r4, r1
 8003fae:	4605      	mov	r5, r0
 8003fb0:	eb12 0804 	adds.w	r8, r2, r4
 8003fb4:	eb43 0905 	adc.w	r9, r3, r5
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	469a      	mov	sl, r3
 8003fc0:	4693      	mov	fp, r2
 8003fc2:	4652      	mov	r2, sl
 8003fc4:	465b      	mov	r3, fp
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	4649      	mov	r1, r9
 8003fca:	f7fc f925 	bl	8000218 <__aeabi_uldivmod>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fdc:	d308      	bcc.n	8003ff0 <UART_SetConfig+0x430>
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe4:	d204      	bcs.n	8003ff0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a3a      	ldr	r2, [r7, #32]
 8003fec:	60da      	str	r2, [r3, #12]
 8003fee:	e0ce      	b.n	800418e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ff6:	e0ca      	b.n	800418e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004000:	d166      	bne.n	80040d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004002:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004006:	2b08      	cmp	r3, #8
 8004008:	d827      	bhi.n	800405a <UART_SetConfig+0x49a>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <UART_SetConfig+0x450>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004035 	.word	0x08004035
 8004014:	0800403d 	.word	0x0800403d
 8004018:	08004045 	.word	0x08004045
 800401c:	0800405b 	.word	0x0800405b
 8004020:	0800404b 	.word	0x0800404b
 8004024:	0800405b 	.word	0x0800405b
 8004028:	0800405b 	.word	0x0800405b
 800402c:	0800405b 	.word	0x0800405b
 8004030:	08004053 	.word	0x08004053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004034:	f7fe fbc6 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8004038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800403a:	e014      	b.n	8004066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800403c:	f7fe fbd8 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8004040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004042:	e010      	b.n	8004066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004044:	4b4e      	ldr	r3, [pc, #312]	; (8004180 <UART_SetConfig+0x5c0>)
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004048:	e00d      	b.n	8004066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404a:	f7fe fb4d 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800404e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004050:	e009      	b.n	8004066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004058:	e005      	b.n	8004066 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004064:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8090 	beq.w	800418e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	4a44      	ldr	r2, [pc, #272]	; (8004184 <UART_SetConfig+0x5c4>)
 8004074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004078:	461a      	mov	r2, r3
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004080:	005a      	lsls	r2, r3, #1
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	085b      	lsrs	r3, r3, #1
 8004088:	441a      	add	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b0f      	cmp	r3, #15
 8004098:	d916      	bls.n	80040c8 <UART_SetConfig+0x508>
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a0:	d212      	bcs.n	80040c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	f023 030f 	bic.w	r3, r3, #15
 80040aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	8bfb      	ldrh	r3, [r7, #30]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	8bfa      	ldrh	r2, [r7, #30]
 80040c4:	60da      	str	r2, [r3, #12]
 80040c6:	e062      	b.n	800418e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040ce:	e05e      	b.n	800418e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d828      	bhi.n	800412a <UART_SetConfig+0x56a>
 80040d8:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <UART_SetConfig+0x520>)
 80040da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040de:	bf00      	nop
 80040e0:	08004105 	.word	0x08004105
 80040e4:	0800410d 	.word	0x0800410d
 80040e8:	08004115 	.word	0x08004115
 80040ec:	0800412b 	.word	0x0800412b
 80040f0:	0800411b 	.word	0x0800411b
 80040f4:	0800412b 	.word	0x0800412b
 80040f8:	0800412b 	.word	0x0800412b
 80040fc:	0800412b 	.word	0x0800412b
 8004100:	08004123 	.word	0x08004123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004104:	f7fe fb5e 	bl	80027c4 <HAL_RCC_GetPCLK1Freq>
 8004108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800410a:	e014      	b.n	8004136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800410c:	f7fe fb70 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8004110:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004112:	e010      	b.n	8004136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <UART_SetConfig+0x5c0>)
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004118:	e00d      	b.n	8004136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411a:	f7fe fae5 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800411e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004120:	e009      	b.n	8004136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004128:	e005      	b.n	8004136 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004134:	bf00      	nop
    }

    if (pclk != 0U)
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	d028      	beq.n	800418e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	4a10      	ldr	r2, [pc, #64]	; (8004184 <UART_SetConfig+0x5c4>)
 8004142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004146:	461a      	mov	r2, r3
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	fbb3 f2f2 	udiv	r2, r3, r2
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	441a      	add	r2, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	fbb2 f3f3 	udiv	r3, r2, r3
 800415e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	2b0f      	cmp	r3, #15
 8004164:	d910      	bls.n	8004188 <UART_SetConfig+0x5c8>
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416c:	d20c      	bcs.n	8004188 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	b29a      	uxth	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60da      	str	r2, [r3, #12]
 8004178:	e009      	b.n	800418e <UART_SetConfig+0x5ce>
 800417a:	bf00      	nop
 800417c:	40008000 	.word	0x40008000
 8004180:	00f42400 	.word	0x00f42400
 8004184:	08004884 	.word	0x08004884
      }
      else
      {
        ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2201      	movs	r2, #1
 8004192:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2201      	movs	r2, #1
 800419a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2200      	movs	r2, #0
 80041a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2200      	movs	r2, #0
 80041a8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80041aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3730      	adds	r7, #48	; 0x30
 80041b2:	46bd      	mov	sp, r7
 80041b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01a      	beq.n	80042ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b6:	d10a      	bne.n	80042ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]
  }
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b098      	sub	sp, #96	; 0x60
 8004300:	af02      	add	r7, sp, #8
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800430c:	f7fc feda 	bl	80010c4 <HAL_GetTick>
 8004310:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b08      	cmp	r3, #8
 800431e:	d12f      	bne.n	8004380 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004328:	2200      	movs	r2, #0
 800432a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f88e 	bl	8004450 <UART_WaitOnFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d022      	beq.n	8004380 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434e:	653b      	str	r3, [r7, #80]	; 0x50
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004358:	647b      	str	r3, [r7, #68]	; 0x44
 800435a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800435e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e6      	bne.n	800433a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e063      	b.n	8004448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d149      	bne.n	8004422 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800438e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004396:	2200      	movs	r2, #0
 8004398:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f857 	bl	8004450 <UART_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d03c      	beq.n	8004422 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	623b      	str	r3, [r7, #32]
   return(result);
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
 80043c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e6      	bne.n	80043a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3308      	adds	r3, #8
 80043f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043fa:	61fa      	str	r2, [r7, #28]
 80043fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	69b9      	ldr	r1, [r7, #24]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	617b      	str	r3, [r7, #20]
   return(result);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e5      	bne.n	80043da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e012      	b.n	8004448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3758      	adds	r7, #88	; 0x58
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004460:	e04f      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d04b      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fc fe2b 	bl	80010c4 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <UART_WaitOnFlagUntilTimeout+0x30>
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e04e      	b.n	8004522 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d037      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b80      	cmp	r3, #128	; 0x80
 8004496:	d034      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d031      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d110      	bne.n	80044ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2208      	movs	r2, #8
 80044b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f838 	bl	800452a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2208      	movs	r2, #8
 80044be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e029      	b.n	8004522 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044dc:	d111      	bne.n	8004502 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f81e 	bl	800452a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e00f      	b.n	8004522 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	429a      	cmp	r2, r3
 800451e:	d0a0      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800452a:	b480      	push	{r7}
 800452c:	b095      	sub	sp, #84	; 0x54
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	643b      	str	r3, [r7, #64]	; 0x40
 8004552:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e6      	bne.n	8004532 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3308      	adds	r3, #8
 800456a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	61fb      	str	r3, [r7, #28]
   return(result);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3308      	adds	r3, #8
 8004586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800458e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e3      	bne.n	8004564 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d118      	bne.n	80045d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f023 0310 	bic.w	r3, r3, #16
 80045b8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6979      	ldr	r1, [r7, #20]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	613b      	str	r3, [r7, #16]
   return(result);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e6      	bne.n	80045a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80045ea:	bf00      	nop
 80045ec:	3754      	adds	r7, #84	; 0x54
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_UARTEx_DisableFifoMode+0x16>
 8004608:	2302      	movs	r3, #2
 800460a:	e027      	b.n	800465c <HAL_UARTEx_DisableFifoMode+0x66>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	; 0x24
 8004618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800463a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800467c:	2302      	movs	r3, #2
 800467e:	e02d      	b.n	80046dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	; 0x24
 800468c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f84f 	bl	8004760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e02d      	b.n	8004758 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2224      	movs	r2, #36	; 0x24
 8004708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f811 	bl	8004760 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800476c:	2b00      	cmp	r3, #0
 800476e:	d108      	bne.n	8004782 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004780:	e031      	b.n	80047e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004782:	2308      	movs	r3, #8
 8004784:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004786:	2308      	movs	r3, #8
 8004788:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	0e5b      	lsrs	r3, r3, #25
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	0f5b      	lsrs	r3, r3, #29
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047aa:	7bbb      	ldrb	r3, [r7, #14]
 80047ac:	7b3a      	ldrb	r2, [r7, #12]
 80047ae:	4911      	ldr	r1, [pc, #68]	; (80047f4 <UARTEx_SetNbDataToProcess+0x94>)
 80047b0:	5c8a      	ldrb	r2, [r1, r2]
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80047b6:	7b3a      	ldrb	r2, [r7, #12]
 80047b8:	490f      	ldr	r1, [pc, #60]	; (80047f8 <UARTEx_SetNbDataToProcess+0x98>)
 80047ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	7b7a      	ldrb	r2, [r7, #13]
 80047cc:	4909      	ldr	r1, [pc, #36]	; (80047f4 <UARTEx_SetNbDataToProcess+0x94>)
 80047ce:	5c8a      	ldrb	r2, [r1, r2]
 80047d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80047d4:	7b7a      	ldrb	r2, [r7, #13]
 80047d6:	4908      	ldr	r1, [pc, #32]	; (80047f8 <UARTEx_SetNbDataToProcess+0x98>)
 80047d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047da:	fb93 f3f2 	sdiv	r3, r3, r2
 80047de:	b29a      	uxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	0800489c 	.word	0x0800489c
 80047f8:	080048a4 	.word	0x080048a4

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4d0d      	ldr	r5, [pc, #52]	; (8004834 <__libc_init_array+0x38>)
 8004800:	4c0d      	ldr	r4, [pc, #52]	; (8004838 <__libc_init_array+0x3c>)
 8004802:	1b64      	subs	r4, r4, r5
 8004804:	10a4      	asrs	r4, r4, #2
 8004806:	2600      	movs	r6, #0
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	4d0b      	ldr	r5, [pc, #44]	; (800483c <__libc_init_array+0x40>)
 800480e:	4c0c      	ldr	r4, [pc, #48]	; (8004840 <__libc_init_array+0x44>)
 8004810:	f000 f820 	bl	8004854 <_init>
 8004814:	1b64      	subs	r4, r4, r5
 8004816:	10a4      	asrs	r4, r4, #2
 8004818:	2600      	movs	r6, #0
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	f855 3b04 	ldr.w	r3, [r5], #4
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	f855 3b04 	ldr.w	r3, [r5], #4
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	080048b4 	.word	0x080048b4
 8004838:	080048b4 	.word	0x080048b4
 800483c:	080048b4 	.word	0x080048b4
 8004840:	080048b8 	.word	0x080048b8

08004844 <memset>:
 8004844:	4402      	add	r2, r0
 8004846:	4603      	mov	r3, r0
 8004848:	4293      	cmp	r3, r2
 800484a:	d100      	bne.n	800484e <memset+0xa>
 800484c:	4770      	bx	lr
 800484e:	f803 1b01 	strb.w	r1, [r3], #1
 8004852:	e7f9      	b.n	8004848 <memset+0x4>

08004854 <_init>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr

08004860 <_fini>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr
